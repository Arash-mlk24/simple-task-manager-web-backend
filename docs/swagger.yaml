basePath: /
definitions:
  dto.ApiError:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.DocsApiResponse:
    properties:
      error:
        $ref: '#/definitions/dto.ApiError'
      hasError:
        type: boolean
      result: {}
    type: object
  dto.UserResponse:
    properties:
      email:
        example: arash.mros@gmail.com
        type: string
      id:
        example: 8420e01d-1a8a-471e-9c36-102163aed978
        type: string
      username:
        example: Arash_mlk24
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server using Go's default net/http
  title: Swagger Example API (net/http)
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            type: string
      summary: List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Register a new user
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get a single user by their id
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ApiResponse wrapping UserResponse
          schema:
            $ref: '#/definitions/dto.DocsApiResponse'
        "400":
          description: Invalid UUID
          schema:
            $ref: '#/definitions/dto.DocsApiResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.DocsApiResponse'
      summary: Get user by id
      tags:
      - users
swagger: "2.0"
